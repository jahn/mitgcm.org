#! /usr/bin/env bash

# $Header: /u/gcmpack/mitgcm.org/scripts/mk_git_tarfile,v 1.11 2019/04/02 14:06:06 jmc Exp $

# download (or update) the source code from github and make a tar file
  git_repo='MITgcm';  git_code='MITgcm'
# git_repo='altMITgcm'; #git_code='MITgcm66h'
tmpFil="/tmp/"`basename $0`".$$"
# update: =0 : get a new clone ; =1 : just pull if clone already exists
update=1

umask 0002

echo 'Changing dir. to /u/u0/httpd/html/download/git_snapshot'
cd /u/u0/httpd/html/download/git_snapshot
outp=$?
if test $outp != 0 ; then
   echo " Error in cd : $outp"
   exit 1
fi
# update: =0 : get a new clone ; =1 : just pull if clone already exists
if test $update = 1 ; then
  if test -d $git_code/.git ; then
    echo " dir $git_code/.git exists, will try to pull from gitHub"
  else
    echo "missing dir $git_code/.git ==> will download a fresh clone"
    update=0
  fi
fi

if test $update = 0 ; then
  test -e $git_code && rm -rf $git_code

  echo "Make a clone of $git_code from repo: $git_repo ..."
  #git clone --depth 1 https://github.com/$git_repo/$git_code.git 2> $tmpFil
   git clone https://github.com/$git_repo/$git_code.git 2> $tmpFil
  outp=$?
  if test $outp = 0 ; then
     echo ' --> done!'
     rm -f $tmpFil
  else
     echo " Error: 'git clone' returned: $outp"
     cat $tmpFil
     rm -f $tmpFil
     exit 2
  fi
else
  echo "Updating existing clone $git_code using 'git pull' ..."
  ( cd $git_code
    git pull 2> $tmpFil
    outp=$?
  )
  if test $outp = 0 ; then
     echo ' --> done!'
     rm -f $tmpFil
  else
     echo " Error: 'git pull' returned: $outp"
     cat $tmpFil
     rm -f $tmpFil
     exit 3
  fi
fi

# chgrp gcmpack $git_code
  chmod 775 $git_code

arName='MITgcm_ss_'`date +%Y%m%d`'.tar'
fixName=MITgcm_today_snapshot.tar.gz
rm -rf MITgcm_ss_* $fixName

echo -n 'Creating the archive file ... '
( cd $git_code ; git archive --prefix MITgcm/ -o ../$arName master )
 gzip -9 $arName
#- should check if successful, it not -> exit 4
if test -e ${arName}.gz ; then
   echo 'Done!'
  #chmod 664 ${arName}.gz
   ls -l ${arName}* | tee -a $HOME/testing/logs/tar_file_list
#- make a link to a fixed name:
   ln -s ${arName}.gz $fixName
   ls -l $fixName
else
   echo 'Fail: no gzip archive file!'
   ls -l ${arName}*
   exit 5
fi

#exit
backupDir="other_checkpoints"
if test ! -d ../$backupDir ; then
  echo -n " make dir: $backupDir"
  mkdir ../$backupDir
  outp=$?
  if test $outp != 0 ; then
     echo " Error in mkdir command: $outp"
     exit 6
  else
     echo " Done"
     ls -ld ../$backupDir
  fi
#else
# ls -ld ../$backupDir
fi

savRepo="${git_code}_git"
echo -n 'Make a tar file of the full git repo ...'
  test -e $savRepo.tar    && mv -f $savRepo.tar    ../$backupDir
  test -e $savRepo.tar.gz && mv -f $savRepo.tar.gz ../$backupDir
  tar -cf $savRepo.tar $git_code
  gzip -9 $savRepo.tar
#- should check if successful, it not -> exit 5
echo ' Done !'
ls -l ${savRepo}*

#-- test for new checkpoint
 version_file="$git_code/doc/tag-index"
#version_file="$git_code/.git/config"
if test -f $version_file ; then
  thischkpt=`awk '/^checkpoint/{print $1; exit}' $version_file`
 #- better way to get latest tag ( but only works with git version 2 )
 #thischkpt=`(cd $git_code ; git tag -l --sort=-authordate | head -n 1 )`
  short=`echo $thischkpt | sed 's/checkpoint/c/'`
  chkptar="MITgcm_${short}.tar"
  if test -f ../$chkptar.gz ; then
    echo "tar file ($chkptar) exist for current tag: $thischkpt"
  else
    echo -n 'Creating the checkpoint archive file ... '
    ( cd $git_code ; git archive --prefix MITgcm/ -o ../$chkptar $thischkpt )
    outp=$?
    if test $outp != 0 ; then
       echo " Error in 'git archive' command: $outp"
       exit 7
    else
       echo " Done"
    fi
    gzip -9 $chkptar
    ls -l ${chkptar}*
    mv $chkptar.gz ..
  #-- move previous tar file to backupDir
    cd ..
    listTar=`ls MITgcm_c*.tar.gz`
    for xx in $listTar ; do
      if test $xx != $chkptar.gz ; then
        if test -f other_checkpoints/$xx ; then
          echo "error: $backupDir/$xx already exist"
        else
          echo " mv $xx $backupDir"
          mv $xx $backupDir
        # echo " Remove $xx"
        # /bin/rm -f $xx
        fi
      fi
    done
  fi
else
  echo "missing file '$version_file' !"
fi
