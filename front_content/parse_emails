#! /usr/bin/env bash

# $Header: /u/gcmpack/mitgcm.org/front_content/parse_emails,v 1.18 2008/09/18 20:13:36 jmc Exp $
#
#  The purpose of this script is to parse the emails produced by the
#  MITgcm/verificaton/testreport script and store the data in a
#  reasonable location.


usage()
{
    echo
    echo "Usage:  $0 [OPTIONS]"
    echo
    echo "where possible OPTIONS are:"
    echo "  (-h|-help)           print usage"
    echo "  (-s|-silent)         silent mode"
    echo "  (-v|-verbose)        verbose mode"
    echo "  (-i |-ind )DIR       get mpack-created emails from DIR"
    echo "                         [def=\"$INDIR\"]"
    echo "  (-o |-outd )DIR      write the data to DIR"
    echo "                         [def=\"$BASEDIR/$monthDir\"]"
    echo "  (-t |-tempd )DIR     use temporary directory DIR"
    echo "                         [def=\"$TEMPDIR\"]"
    echo "  (-u |-unpack )EXE    use executable EXE to unpack e-mails"
    echo "                         [def=\"$MUNPACK\"]"
    echo "  (-a |-addr )ADDR     send e-mail to ADDR if Error"
    echo "                         [def='"$ADDRERR"']"
    echo
    exit 1
}

# defaults
INDIR="/u/u2/jmc/Mail/MITgcm-test"
BASEDIR="/u/u0/httpd/html/testing/results"
monthDir=`date +%Y`"_"`date +%m`
OUTDIR=
TEMPDIR=./ptmp
MUNPACK=munpack
ADDRERR=
PRT=1

#  Parse options
ac_prev=
for ac_option ; do

    # If the previous option needs an argument, assign it.
    if test -n "$ac_prev"; then
        eval "$ac_prev=\$ac_option"
        ac_prev=
        continue
    fi

    ac_optarg=`expr "x$ac_option" : 'x[^=]*=\(.*\)'`

    case $ac_option in
	
	-help | --help | -h | --h)
	    usage ;;
	-s | --s | -silent | --silent)
            PRT=0 ;;
	-v | --v | -verbose | --verbose)
            PRT=2 ;;
	
        -ind | --ind | -i | --i)
            ac_prev=INDIR ;;
        --ind=* | -ind=* | --i=* | -i=*)
            INDIR=$ac_optarg ;;

        -outd | --outd | -o | --o)
            ac_prev=OUTDIR ;;
        --outd=* | -outd=* | --o=* | -o=*)
            OUTDIR=$ac_optarg ;;

        -tempd | --tempd | -t | --t)
            ac_prev=TEMPDIR ;;
        --tempd=* | -tempd=* | --t=* | -t=*)
            TEMPDIR=$ac_optarg ;;

        -u | --u | -unpack | --unpack)
            ac_prev=MUNPACK ;;
        -u=* | --u=* | -unpack=* | --unpack=*)
            MUNPACK=$ac_optarg ;;

        -a | --a | -addr | --addr)
            ac_prev=ADDRERR ;;
        -a=* | --a=* | -addr=* | --addr=*)
            ADDRERR=$ac_optarg ;;

        *)
	    # copy the file list to FL_#
	    date
	    echo "Error: don't understand argument \"$ac_option\""
	    usage
            ;;

     esac

done

if test ! -x $MUNPACK ; then
	date
	echo "ERROR: \"$MUNPACK\" is not executable"
	exit 2
fi
if test "x$OUTDIR" = x ; then
  OUTDIR="$BASEDIR/$monthDir"
else
  monthDir=0
fi
if test ! -e $OUTDIR ; then
    mkdir $OUTDIR
    RETVAL=$?
    if test "x$RETVAL" != x0 ; then
	date
	echo "ERROR: directory \"$OUTDIR\" doesn't exist and can't be created"
	exit 3
    fi
    chgrp gcmpack $OUTDIR
    chmod 775 $OUTDIR
fi

all_files=`ls -1 $INDIR`
nb_files=`echo "$all_files" | grep -c '^msg\.'`

if test $PRT = 1 ; then
  echo "Using OUTDIR=\"$OUTDIR\""
  echo "Using INDIR=\"$INDIR\""
  echo -n "Unpacking the emails ..."
elif test $nb_files != 0 ; then
  echo -n "Unpacking $nb_files emails ("`date`
  if test "x$ADDRERR" != x ; then
     echo -n ", err-msg: '$ADDRERR'"
  fi
  echo ")"
  echo " from '$INDIR' to '$OUTDIR'"
fi

for file in $all_files ; do

    #  create local copy
    test -e $TEMPDIR  &&  rm -rf $TEMPDIR
    mkdir $TEMPDIR
    RETVAL=$?
    if test "x$RETVAL" = x0 ; then
      cp $INDIR"/"$file $TEMPDIR
      RETVAL=$?
    fi
    if test "x$RETVAL" != x0 ; then
      if test "x$ADDRERR" != x ; then
        echo "parsing email error" > tmp.$$
        echo " processing file: '$INDIR/$file'" >> tmp.$$
        echo -n "'mkdir $TEMPDIR' or 'cp $INDIR/$file $TEMPDIR'" >> tmp.$$
        echo " returns error $RETVAL" >> tmp.$$
        mail -s 'parse_emails err_0' $ADDRERR < tmp.$$
        rm -f tmp.$$
      fi
      mv -f $INDIR"/"$file $INDIR"/../fail2process/"$file
      continue
    fi

    #  ignore multi-part messages
    grep "Content-Type: message/partial" $INDIR"/"$file > /dev/null 2>&1
    RETVAL=$?
    if test "x$RETVAL" = x0 ; then
      if test "x$ADDRERR" != x ; then
        echo "parsing email error" > tmp.$$
        echo 'grep "Content-Type: message/partial" returns error:' $RETVAL >> tmp.$$
        ls -l $INDIR"/"$file >> tmp.$$
        mail -s 'parse_emails err_1' $ADDRERR < tmp.$$
        rm -f tmp.$$
      fi
      mv -f $INDIR"/"$file $INDIR"/../fail2process/"$file
      continue
    fi

    #  munpack
    mun=`( cd $TEMPDIR ; $MUNPACK $file | cut -d ' ' -f 1 | head -1 )`
    RETVAL=$?
    if test "x$RETVAL" != x0 ; then
      if test "x$ADDRERR" != x ; then
        echo "parsing email error" > tmp.$$
        echo "$MUNPACK $file returns error: $RETVAL" >> tmp.$$
        ls -l $INDIR"/"$file >> tmp.$$
        mail -s 'parse_emails err_2' $ADDRERR < tmp.$$
        rm -f tmp.$$
      fi
      mv -f $INDIR"/"$file $INDIR"/../fail2process/"$file
      continue
    fi

    #  un-tar
    ( cd $TEMPDIR ; tar -xzvf $mun > out )
    RETVAL=$?
    if test "x$RETVAL" != x0 ; then
      if test "x$ADDRERR" != x ; then
        echo "parsing email error" > tmp.$$
        echo "tar -xzvf $mun returns error:" $RETVAL >> tmp.$$
        ls -l $INDIR"/"$file >> tmp.$$
        ls -l $mun >> tmp.$$
        mail -s 'parse_emails err_3' $ADDRERR < tmp.$$
        rm -f tmp.$$
      fi
      mv -f $INDIR"/"$file $INDIR"/../fail2process/"$file
      continue
    fi
    tdir=`cat $TEMPDIR"/out" | head -1 | sed -e 's|^./||g' | cut -d '/' -f 1`
    rm -f $TEMPDIR"/out"

    #  select which Monthly Output Dir:
    locDir=$OUTDIR
    if test "x$monthDir" != x0 ; then
      dd=`echo $tdir | sed 's/_/ /g' | awk '{ for(i=1;i<=NF;i++) print $i }'\
               | grep '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' | tail -1`
      mn=`echo $dd | sed 's/..$//' | sed 's/..$/_&/'`
      if test "x$mn" != "x$monthDir" ; then
       if test "x$mn" = x ; then
        if test $PRT = 2 ; then echo " cannot get month from '$tdir'" ; fi
       else
       #  could comment out this line:
       #if test $PRT = 2 ; then echo " chg month: '$mn' for '$tdir'" ; fi
        locDir="$BASEDIR/$mn"
        if test ! -d $locDir ; then
          if test $PRT = 2 ; then echo "NO DIR: '$locDir' => '$tdir' POSTPONED" ; fi
          if test "x$ADDRERR" != x ; then
            echo "parsing email error" > tmp.$$
            echo "no dir '$locDir' for outp. '$tdir'" > tmp.$$
            ls -l $INDIR"/"$file >> tmp.$$
            mail -s 'parse_emails err_4' $ADDRERR < tmp.$$
            rm -f tmp.$$
          fi
          continue
        fi
       fi
      fi
    fi

    #  copy to $locDir and rename if necessary
    sdir=$tdir
    if test -e $locDir"/"$tdir ; then
	ad=0
	while test -e $locDir"/"$tdir"_"$ad ; do
	    ad=$(( $ad + 1 ))
	done
        sdir=$tdir"_"$ad
    fi
    if test $PRT = 2 ; then
      if test "x$locDir" = "x$OUTDIR"
      then echo " '$sdir'"
      else echo " '$sdir' => '$locDir'"
      fi
    fi
    mv $TEMPDIR"/"$tdir $locDir"/"$sdir > /dev/null 2>&1
    RETVAL=$?
    if test "x$RETVAL" != x0 ; then
      if test "x$ADDRERR" != x ; then
        echo "parsing email error" > tmp.$$
        echo "mv $TEMPDIR/$tdir $locDir/$sdir returns error:" $RETVAL >> tmp.$$
        echo -n "in dir: $TEMPDIR : " ; ls -l $TEMPDIR  >> tmp.$$
        echo -n "in dir: $OUTDIR : " ; ls -l $locDir  >> tmp.$$
        mail -s 'parse_emails err_5' $ADDRERR < tmp.$$
        rm -f tmp.$$
      fi
      mv -f $INDIR"/"$file $INDIR"/../fail2process/"$file
      continue
    fi
    chmod -R a+rx $locDir"/"$sdir > /dev/null 2>&1

    #  remove the original file
    rm -f $INDIR"/"$file

done
if test $PRT = 1 ; then echo "  done" ; fi

