#! /usr/bin/env bash

# $Header: /u/gcmpack/mitgcm.org/front_content/make_summary,v 1.18 2004/07/08 21:32:07 edhill Exp $
#
#  The purpose of this script is to create HTML summaries of the
#  directories produced by the "parse_emails" script.


usage()
{
    echo
    echo "Usage:  $0 [OPTIONS]"
    echo 
    echo "where possible OPTIONS are:"
    echo "  (-help|-h)           print usage"
    echo "  (-date |-d )PERIOD   run for PERIOD=\"YYYY_MM\""
    echo "                         [def=\"$PERIOD\"]"
    echo 
    exit 1
}

old_summary()
{
    #  Create the old-style summary file for $PERIOD
    echo -n "Creating the summary file for the period \"$PERIOD\" ...  "
    cat > $OUTFILE << EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>MITgcm testing summary</title>
    <meta name="author" content="Ed Hill" />
    <base href="http://mitgcm.org/testing/summary/" />
  </head>
  <body>
    <table cellpadding="0" cellspacing="0" border="0" width="100%">

EOF

    # all_files=`find $INDIR -name summary.txt`
    all_files=`( cd $INDIR ; find . -name summary.txt )`

    for f in $all_files ; do
	
	file=$INDIR"/"${f/.\//}
	grep "^fresults" $file > /dev/null 2>&1
	RETVAL=$?
	if test "x$RETVAL" != x0 ; then
	    continue
	fi
	
	url=`echo $file | sed -e 's|/u/edhill/www|http://mitgcm.org/~edhill|'`
	url=`echo $url | sed -e 's|summary.txt||'`
	MACH=
	fresults=
	color="#eeeeee"
	
	source $file
	echo $fresults | grep FAIL > /dev/null 2>&1
	if test "x$?" = x0 ; then
	    color="#ff99ff"
	fi
	echo $fresults | grep pass > /dev/null 2>&1
	if test "x$?" = x0 ; then
	    color="#99ffff"
	fi
	
	gm_state=`echo $file | sed -e 's/summary.txt/genmake_state/g'`
	if test -r $gm_state ; then
	    grep '^OPTFILE=' $gm_state > ./tmp_state
	    source ./tmp_state
	else
	    optfile="unknown"
	fi
	optfile=`echo $OPTFILE | awk -F '/' '{print $NF}'`
	
	echo "<tr bgcolor=\"$color\">" >> $OUTFILE
	echo "<td height=\"0\">$MACH</td>" >> $OUTFILE
	echo "<td><a href=\"$url\">$DATE</a></td>" >> $OUTFILE
	for i in $fresults ; do
	    if test "x$i" = xN ; then
		echo -n "<td bgcolor=\"#ff6666\">$i</td>" >> $OUTFILE
	    else
		echo -n "<td>$i</td>" >> $OUTFILE
	    fi
	done
	echo "<td>$optfile</td>" >> $OUTFILE
	echo "</tr>" >> $OUTFILE
	
    done
    
    cat >> $OUTFILE << EOF

    </table>
  </body>
</html>
EOF

    chmod a+r $OUTFILE
    echo "done"
}


# defaults
PERIOD=`date +%Y`"_"`date +%m`

#  Parse options
ac_prev=
for ac_option ; do
        
    # If the previous option needs an argument, assign it.
    if test -n "$ac_prev"; then
        eval "$ac_prev=\$ac_option"
        ac_prev=
        continue
    fi
    
    ac_optarg=`expr "x$ac_option" : 'x[^=]*=\(.*\)'`
    
    case $ac_option in
	
	-help | --help | -h | --h)
	    usage ;;
	
        -date | --date | -d | --d)
            ac_prev=PERIOD ;;
        --date=* | -date=*)
            PERIOD=$ac_optarg ;;
        
        *)
	    echo "Error: don't understand argument \"$ac_option\""
	    usage
            ;;
        
     esac
     
done

INDIR="/u/u0/httpd/html/testing/results/$PERIOD"
OUTDIR="/u/u0/httpd/html/testing/summary"
OUTFILE=$OUTDIR"/summary_"$PERIOD".html"

#  Create the "latest" links
echo "Creating the \"latest\" file for each machine: "
LATEST=$OUTDIR"/latest_"$PERIOD".html"
the_date=`date`
cat > $LATEST << EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>MITgcm testing summary</title>
    <meta name="author" content="Ed Hill" />

    <!-- <base href="http://mitgcm.org/testing/summary/" /> -->

    <!-- Hinting for menu generation -->
    <meta name="add_name_0" content="Testing" />
    <meta name="add_name_1" content="" />
    <meta name="add_name_2" content="" />
    <meta name="add_title" content="Testing" />
    <!-- Hinting for menu generation -->

  </head>
  <body>
    <p>The MITgcm model is tested 
      (compiled and run) in an automated fashion on a varirety of 
      different machines.  The following is a summary of the MITgcm 
      verification suite for the time period: <b>$PERIOD</b>.</p>

    <p>The machine naming scheme is:<br /></p>
    <table align="center" cellpadding="0" border="0">
      <tr bgcolor="#00cccc"> <td><b>Machine Type</b></td> <td><b>Nickname</b></td>
        <td><b>Notes</b></td> </tr>

      <tr bgcolor="#bbffdd"> <td>Intel P4</td> <td>"faulks"</td> 
        <td>Fedora Core 1 [formerly Red Hat 7.3]</td> </tr>
      <tr bgcolor="#bbddff"> <td>Intel P4</td> <td>"hemmingway"</td>
        <td>Fedora Core 1 (gcc 3.3.2)</td> </tr>

      <tr bgcolor="#bbffdd"> <td> Intel P3/P4 Beowulf </td> <td>"myrinet"</td>
        <td><a href="http://mitgcm.org/projects/MITGCM_CLUSTER/">MITgcm cluster 
        facility </a></td> </tr>
      <tr bgcolor="#bbddff"> <td>Alpha cluster</td> <td>"halem"</td>
        <td><a href="http://nccstag.gsfc.nasa.gov/halem/quickstart_halem.html">
        NASA NCCS Halem</a></td> </tr>

      <tr bgcolor="#bbffdd"> <td> SGI Origin 2000 </td> <td>"hopper"</td>
        <td><a href="http://www.nas.nasa.gov/User/Systemsdocs/O2K/o2k.html">
        NAS SGI Origin 2000 </a></td> </tr>
      <tr bgcolor="#bbddff"> <td> SGI Origin 3000 </td> <td>"lomax"/"turing"</td>
        <td><a href="http://www.nas.nasa.gov/User/Systemsdocs/O3K/o3k.html">
        NAS SGI Origin 3000 </a></td> </tr>

      <!-- <tr bgcolor="#bbffdd"> <td> SGI Altix </td> <td>"orion"</td>
        <td><a href="http://sc.jpl.nasa.gov/">JPL Supercomputing and 
        Visualization Facility</a></td> </tr> -->
      <tr bgcolor="#bbffdd"> <td> SGI Altix 350 </td> <td>"altix350"</td>
        <td><a href="http://acesgrid.org/geocluster/">MIT ACESgrid 
        GeoCluster</a></td> </tr>
      <tr bgcolor="#bbddff"> <td> IBM POWER3 SP </td> <td>"bf"</td>
        <td><a href="http://www.scd.ucar.edu/computers/blackforest/">NCAR Blackforest
        </a></td> </tr>

      <tr bgcolor="#bbffdd"> <td> IBM POWER4 SP </td> <td>"bs"</td>
        <td><a href="http://www.scd.ucar.edu/computers/bluesky/">NCAR Bluesky
        </a></td> </tr>
      <tr bgcolor="#bbddff"> <td> AMD Opteron </td> <td>"adams"</td>
        <td>RHEL v3 (AMD64)</td> </tr>

      <tr bgcolor="#bbffdd"> <td> Sun UltraSparc </td> <td>"slough"</td>
        <td>Solaris 8</td> </tr>
      <tr bgcolor="#bbddff"> <td> Intel P4 Mosix Cluster </td> <td>"sea"</td>
        <td>Red Hat v7.2</td> </tr>

      <tr bgcolor="#bbffdd"> <td> AMD Athlon XP 2500+</td> <td>"eddy"</td>
        <td>Fedora Core 2 (Red Hat gcc 3.3.3)</td> </tr>
      <tr bgcolor="#bbddff"> <td> AMD Opteron cluster </td> <td>"dolphin"</td>
        <td>SuSE SLES v8.1</td> </tr>

      <!--

      <tr bgcolor="#bbffdd"> <td> Intel P4 </td> <td>"hemmingway"</td>
        <td>Fedora Core release 1 (gcc 3.3.2) </td> </tr>

      <tr bgcolor="#bbddff"> <td>  </td> <td>""</td>
        <td></td> </tr>
      -->

    </table>

    <p><br />
      The complete output for the verification runs can be found in
      <a href="http://mitgcm.org/testing/summary/">the summary pages</a>
      and the <a href="http://mitgcm.org/testing/results/">testing archives</a>. 
      The latest reports are:</p>
    <table align="center" cellpadding="0" cellspacing="0" border="0" width="95%">
<tr bgcolor="#00cccc">
  <td height="0"> <b>Nickname</b> </td>
  <td> <b>OPTFILE Name</b> </td>
  <td> <b>Type</b> </td>
  <td> <b>Date</b> </td>
  <td> <b>Summary</b> </td>
  <td> <b>Ratio</b> </td>
</tr>

EOF

color="#bbffdd"
ncolor="#bbddff"
res_url="http://mitgcm.org/testing/"

MACHINES="faulks shelley myrinet eaps halem hopper lomax turing orion bf bs slough sea"
MACHINES="$MACHINES  eddy adams dolphin hemmingway altix350"

( cd $INDIR ; ls -1 -t ) > ./dir_all

for mname in $MACHINES ; do

    echo "  $mname"

    dir_list=`grep $mname ./dir_all`
    echo -n "" > ./mlist

    for i in $dir_list ; do

	dir=$INDIR"/"$i
	OPTFILE=
	if test -r $dir/summary.txt ; then
	    comm=`grep 'OPTFILE=' $dir/summary.txt`
	    eval $comm
	    OPTFILE=${OPTFILE##*/}
	fi
	if test "x$OPTFILE" = x -a -r "$dir/genmake_state" ; then
	    comm=`grep 'OPTFILE=' $dir/genmake_state 2>/dev/null`
	    eval $comm
	    OPTFILE=${OPTFILE##*/}
	fi
	if test "x$OPTFILE" = x ; then
	    comm=`grep '^# OPTFILE=' $dir/*/Makefile 2>/dev/null | head -1`
	    comm=${comm##*#}
	    eval $comm
	    OPTFILE=${OPTFILE##*/}
	fi
	if test "x$OPTFILE" = x ; then
	    OPTFILE="not_explicitly_specified"
	fi

	ADJOINT=
	if test -r $dir/summary.txt ; then
	    comm=`grep 'ADJOINT=true' $dir/summary.txt 2>/dev/null`
	    eval $comm
	fi
	if test "x$ADJOINT" = x ; then
	    kind="forward"
	else
	    test "x$ADJOINT" = xtrue  &&  kind="adjoint"
	fi

	t_pass="--"
	t_tot="--"
	if test -r $dir/summary.txt ; then
	    grep '^[YN] [YN] [YN] [YN] ' $dir/summary.txt > ./all_tests 2>/dev/null
	    t_tot=`cat ./all_tests | wc -l | sed -e 's| ||g'`
	    grep '^Y Y Y Y ' ./all_tests > ./all_ran 2>/dev/null
	    grep advect_ ./all_ran 2>/dev/null > ./all_ran_advect
	    t_advect=`cat ./all_ran_advect | wc -l | sed -e 's| ||g'`
	    digits=`cat ./all_ran_advect | awk '{print $9}'`
	    t_advect_pass=0
	    for k in $digits ; do
		test "x$k" = x--   &&  k=0
		test $k -ge 9  &&  t_advect_pass=$(( $t_advect_pass + 1 ))
	    done
	    grep -v advect ./all_ran 2>/dev/null > ./all_ran_noadvect
	    digits=`cat ./all_ran_noadvect | awk '{print $5}'`
	    t_sum=0
	    for k in $digits ; do
		test "x$k" = x--   &&  k=0
		test $k -ge 9  &&  t_sum=$(( $t_sum + 1 ))
	    done
	    t_pass=$(( $t_sum + $t_advect_pass ))
	fi
	rm -f ./all_tests ./all_ran ./all_ran_advect ./all_ran_noadvect
	# echo "${dir##*/} : $t_pass out of $t_tot"

	tokens=`echo $i | sed -e 's|_| |g'`
	echo "" > ./ms_tmp
	for tok in $tokens ; do
	    echo $tok >> ./ms_tmp
	done
	DAY=`cat ./ms_tmp | awk '(length($1)==8 && substr($1,0,3)=="200")'`
	rm -f ./ms_tmp

	echo "$OPTFILE$kind $DAY $OPTFILE $kind $i $t_pass:$t_tot" >> ./mlist

    done

    # helpful for debugging
    # cat ./mlist

    #  Do we have any data?  If so, create the latest pointer.
    num=`wc -l ./mlist | awk '{print $1}'`
    if test $num -gt 0 ; then

	# swap colors
        ctmp=$color
        color=$ncolor
        ncolor=$ctmp

	keys=`cat ./mlist | cut -d " " -f 1 | sort | uniq`

	for key in $keys ; do
	    tline=`grep "^$key " ./mlist | head -1`
	    ratio=`echo $tline | cut -d " " -f 6`
	    ldir=`echo $tline | cut -d " " -f 5`
	    kind=`echo $tline | cut -d " " -f 4`
	    optf=`echo $tline | cut -d " " -f 3`
	    DAY=`echo $tline | cut -d " " -f 2`
	    URL="results/$PERIOD/$ldir"
	    cat <<EOF >>$LATEST
<tr bgcolor="$color">
  <td height="0"> $mname </td>
  <td> $optf </td>
  <td> $kind </td>
  <td> <a href="$res_url$URL">$DAY</a> </td>
  <td> <a href="$res_url$URL/summary.txt"> summary.txt </a> </td>
  <td> $ratio </td>
</tr>
EOF
	done
    fi

done

cat >> $LATEST << EOF
<tr bgcolor="#00cccc">
  <td height="0" colspan="6" align="center" >This table generated on: $the_date</td>
</tr>

    </table>

<p>Examples of the scripts used for these testing runs can be obtained
from <a
href="http://dev.mitgcm.org/cgi-bin/viewcvs.cgi/MITgcm_contrib/test_scripts/">
the "contrib" area of the MITgcm CVS archive</a>.</p>


  </body>
</html>

EOF

rm -f ./dir_all ./mlist

CURR_PER=`date +%Y`"_"`date +%m`
if test "x$PERIOD" = "x$CURR_PER" ; then
    cp $LATEST ./testing.xml
    (
	cd $OUTDIR
	rm -f latest.html
	ln -s $LATEST latest.html
    )
fi
