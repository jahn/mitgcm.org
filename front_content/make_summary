#! /usr/bin/env bash

# $Header: /u/gcmpack/mitgcm.org/front_content/make_summary,v 1.73 2012/09/04 20:12:20 jmc Exp $
#
#  The purpose of this script is to create HTML summaries of the
#  directories produced by the "parse_emails" script.


usage()
{
    echo
    echo "Usage:  $0 [OPTIONS]"
    echo
    echo "where possible OPTIONS are:"
    echo "  (-help|-h)           print usage"
    echo "  (-date |-d )PERIOD   run for PERIOD=\"YYYY_MM\""
    echo "                         [def=\"$PERIOD\"]"
    echo
    exit 1
}

export LC_ALL="en_US.UTF-8"
CURR_PER=`date +%Y`"_"`date +%m`
# defaults
PERIOD=$CURR_PER

#  Parse options
ac_prev=
for ac_option ; do

    # If the previous option needs an argument, assign it.
    if test -n "$ac_prev"; then
	eval "$ac_prev=\$ac_option"
	ac_prev=
	continue
    fi

    ac_optarg=`expr "x$ac_option" : 'x[^=]*=\(.*\)'`

    case $ac_option in

	-help | --help | -h | --h)
	    usage ;;

	-date | --date | -d | --d)
	    ac_prev=PERIOD ;;
	--date=* | -date=*)
	    PERIOD=$ac_optarg ;;

	*)
	    echo "Error: don't understand argument \"$ac_option\""
	    usage
	    ;;

     esac

done

#INDIR="/net/orwell/export/export-9/mitgcm-testing/results/$PERIOD"
#OUTDIR="/home/jmc/mitgcm/test_web/summary"
INDIR="/u/u0/httpd/html/testing/results/$PERIOD"
OUTDIR="/u/u0/httpd/html/testing/summary"

OUTFILE=$OUTDIR"/output_"$PERIOD".html"
res_url="http://mitgcm.org/testing/"

#  Create the links in $OUTFILE :
echo "Creating the \"latest\" file for each machine: "
the_date=`date`

sed "s/_PERIOD/$PERIOD/" summary_head > $OUTFILE
cat <<EOF >>$OUTFILE
    <table align="center" cellpadding="0" cellspacing="0" border="0" width="95%">
<tr bgcolor="#00cccc">
  <td height="0"> <b>Nickname</b> </td>
  <td> <b>OPTFILE Name</b> </td>
  <td> <b>Type</b> </td>
  <td> <b>Date</b> </td>
  <td> <b>Summary</b> </td>
  <td> <b>Ratio</b> </td>
</tr>

EOF

color="#bbffdd"
ncolor="#bbddff"

MACHINES="faulks meander aces- acesgrid baudelaire dickens danton beagle harbor"
MACHINES="$MACHINES pleiades iblade rays solasrv sx8"
MACHINES="$MACHINES trane dodongo dokdo stomp bigred"

( cd $INDIR ; ls -1 -t */summary.txt | sed 's/\/summary.txt//' ) > ./dir_all

MALL=`cat ./dir_all | sed -e 's|_| |g' | awk '{print $2}' | sort | uniq`
for madd in $MALL ; do
    present=0
    for m in $MACHINES ; do
	echo $madd | grep $m > /dev/null 2>&1
	RETVAL=$?
	test $RETVAL = 0  &&  present=1
	continue
    done
    test $present = 0  &&  MACHINES="$MACHINES $madd"
done
#MACHINES="baudelaire"

for mname in $MACHINES ; do

    echo "  $mname"
    sname=`echo $mname | sed 's/-$//'`

    dir_list=`grep $mname ./dir_all`
    echo -n "" > ./mlist

    for i in $dir_list ; do

	dir=$INDIR"/"$i
	OPTFILE=
	if test -r $dir/summary.txt ; then
	    comm=`grep 'OPTFILE=' $dir/summary.txt`
	    eval $comm
	    OPTFILE=${OPTFILE##*/}
	fi
	if test "x$OPTFILE" = x -a -r "$dir/genmake_state" ; then
	    comm=`grep 'OPTFILE=' $dir/genmake_state 2>/dev/null`
	    eval $comm
	    OPTFILE=${OPTFILE##*/}
	fi
	if test "x$OPTFILE" = x ; then
	    comm=`grep '^# OPTFILE=' $dir/*/Makefile* 2>/dev/null | head -1`
	    comm=${comm##*#}
	    eval $comm
	    OPTFILE=${OPTFILE##*/}
	fi
	if test "x$OPTFILE" = x ; then
	    OPTFILE="not_explicitly_specified"
	fi

	# EXTRA = non-standard list of experiment
	ADJOINT=
	TANGLIN=
	RESTART=0
	EXTRA=0
	FAST=0
	DVLP=0
	MPI=0
	MTH=0
	UR4=0
	if test -r $dir/summary.txt ; then
	    comm=`grep 'ADJOINT=true' $dir/summary.txt 2>/dev/null`
	    eval $comm
	    comm=`grep 'TANGLIN=true' $dir/summary.txt 2>/dev/null`
	    eval $comm
	    RESTART=`grep -c 'test 2+2=4 summary' $dir/summary.txt`
	    comm=`grep '^run: .*testreport.* ' $dir/summary.txt`
	    EXTRA=`echo "$comm" | grep -c " -*-tdir\>"`
	    if test "x$EXTRA" = x0 ; then
	       EXTRA=`echo "$comm" | grep -c " -*-t\>"`
	    fi
	    FAST=`echo "$comm" | grep -c " -*-fast\>"`
	    if test "x$FAST" = x0 ; then
	       FAST=`echo "$comm" | grep -c " '*-noieee'*"`
	    fi
	    DVLP=`echo "$comm" | grep -c " -*-devel\>"`
	    MPI=`echo "$comm" | grep -c " -*-mpi\>"`
	    if test "x$MPI" = x0 ; then
	       MPI=`echo "$comm" | grep -c " -*-MPI\>"`
	    fi
	    MTH=`echo "$comm" | grep -c " -*-mth\>"`
	    UR4=`echo "$comm" | grep -c " -*-use_r4\>"`
	    if test "x$UR4" = x0 ; then
	       UR4=`echo "$comm" | grep -c " -*-ur4\>"`
	    fi
	fi
	if test "x$ADJOINT" = xtrue ; then
	    kind="adjoint" ; order=0
	elif test "x$TANGLIN" = xtrue ; then
	    kind="tanglin" ; order=1
	elif test "x$RESTART" = x0 ; then
	    kind="forward" ; order=2
	else
	    kind="restart" ; order=3
	fi
	if test "x$EXTRA" != x0 ; then
	    order=`expr $order + 4`
	fi
	order=`printf '%3.3i' $order`
	if test "x$UR4" = x1 ; then
	    OPTFILE="${OPTFILE}.use_r4"
	fi
	if test "x$MPI" = x1 ; then
	    yy=`echo $OPTFILE | grep -c '+mpi'`
	    if test $yy = 0 ; then OPTFILE="${OPTFILE}+mpi" ; fi
	fi
	if test "x$MTH" = x1 ; then
	    yy=`echo $OPTFILE | grep -c '+mth$'`
	    if test $yy = 0 ; then OPTFILE="${OPTFILE}+mth" ; fi
	fi
	if test "x$FAST" = x1 ; then
	    OPTFILE="${OPTFILE}.fast"
	fi
	if test "x$DVLP" = x1 ; then
	    OPTFILE="${OPTFILE}.dvlp"
	fi

	t_pass="--"
	t_tot="--"
	if test -r $dir/summary.txt ; then
	    grep '^[YN] [YN] [YN] [YN]' $dir/summary.txt > ./all_tests 2>/dev/null
	    t_tot=`cat ./all_tests | wc -l | sed -e 's| ||g'`
	    t_pass=`grep '^Y Y Y Y' ./all_tests | grep 'pass ' | wc -l | sed -e 's| ||g'`
	fi
	rm -f ./all_tests
	# echo "${dir##*/} : $t_pass out of $t_tot"

	tokens=`echo $i | sed -e 's|_| |g'`
	echo "" > ./ms_tmp
	for tok in $tokens ; do
	    echo $tok >> ./ms_tmp
	done
	DAY=`cat ./ms_tmp | awk '(length($1)==8 && substr($1,0,2)=="20")'`
	rm -f ./ms_tmp

	echo "$OPTFILE$order $DAY $OPTFILE $kind $i $t_pass:$t_tot" >> ./mlist

    done

    # helpful for debugging
    # cat ./mlist

    #  Do we have any data?  If so, create the latest pointer.
    num=`wc -l ./mlist | awk '{print $1}'`
    if test $num -gt 0 ; then

	# swap colors
	ctmp=$color
	color=$ncolor
	ncolor=$ctmp

	keys=`cat ./mlist | cut -d " " -f 1 | sort | uniq`

	for key in $keys ; do
	    tline=`grep "^$key " ./mlist | head -1`
	    ratio=`echo $tline | cut -d " " -f 6`
	    ldir=`echo $tline | cut -d " " -f 5`
	    kind=`echo $tline | cut -d " " -f 4`
	    optf=`echo $tline | cut -d " " -f 3`
	    DAY=`echo $tline | cut -d " " -f 2`
	    URL="results/$PERIOD/$ldir"
	    cat <<EOF >>$OUTFILE
<tr bgcolor="$color">
  <td height="0"> $sname </td>
  <td> $optf </td>
  <td> $kind </td>
  <td> <a href="$res_url$URL">$DAY</a> </td>
  <td> <a href="$res_url$URL/summary.txt"> summary.txt </a> </td>
  <td> $ratio </td>
</tr>
EOF
	done
    fi

done

cat >> $OUTFILE << EOF
<tr bgcolor="#00cccc">
  <td height="0" colspan="6" align="center" >This table generated on: $the_date</td>
</tr>

    </table>

<p>Examples of the scripts used for these testing runs can be obtained from: <a
href="http://mitgcm.org/viewvc/MITgcm/MITgcm/tools/example_scripts/">
MITgcm/tools/example_scripts</a>.</p>


  </body>
</html>

EOF

rm -f ./dir_all ./mlist

#- put the file in place
chgrp gcmpack $OUTFILE
chmod 664 $OUTFILE
LATEST=$OUTDIR"/latest_"$PERIOD".html"
mv -f $OUTFILE $LATEST

if test "x$PERIOD" = "x$CURR_PER" ; then
    cp $LATEST ./testing.xml
    (
	cd $OUTDIR
	rm -f latest.html
	ln -s $LATEST latest.html
    )
fi
